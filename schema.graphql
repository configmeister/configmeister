# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: queries
    mutation: mutations
}

type CfgBranch {
    "Complex values of the branch"
    complexValues: [CfgComplex]!
    "Created at timestamp"
    createdAt: Timestamp!
    "Id of the branch"
    id: String!
    "Name of the branch"
    name: String!
    "Scalar values of the branch"
    scalarValues: [CfgScalar]!
    "What this branch is attached to"
    sourceId: String!
    "Updated at timestamp"
    updatedAt: Timestamp!
}

type CfgComplex {
    "Created at timestamp"
    createdAt: Timestamp
    "Id of the complex value entry"
    id: String!
    "Name of the complex value entry"
    name: String!
    "What this complex value is attached to"
    sourceId: String!
    "Type of the complex value entry"
    type: CfgEnumComplexType!
    "Updated at timestamp"
    updatedAt: Timestamp
    "Array of values of this complex value"
    values: [CfgScalar]!
}

type CfgConfiguration {
    "Created at timestamp"
    createdAt: Timestamp!
    "Id of the configuration"
    id: String!
    "Name of the configuration"
    name: String!
    "Updated at timestamp"
    updatedAt: Timestamp!
    "Versions of the configuration"
    versions: [CfgVersion!]
}

type CfgScalar {
    "Created at timestamp"
    createdAt: Timestamp!
    "Id of scalar value entry"
    id: String!
    "Name of scalar value entry"
    name: String!
    "Source id (complex, branch, etc) of this scalar"
    sourceId: String!
    "Type of value"
    type: CfgEnumScalarType!
    "Updated at timestamp"
    updatedAt: Timestamp!
    "JSON value of scalar value"
    value: String!
}

type CfgVersion {
    "Branches of this version"
    branches: [CfgBranch]
    "Created at timestamp"
    createdAt: Timestamp!
    "Id of the version"
    id: String!
    "Name of the version"
    name: String!
    "What is this version attached to"
    sourceId: String!
    "Updated at timestamp"
    updatedAt: Timestamp!
}

type mutations {
    "Create new or update existing branch"
    cfgBranch(value: CfgBranchInput!): CfgBranch
    "Create or update complex value"
    cfgComplex(value: CfgComplexInput!): CfgComplex
    "Create or update configuration"
    cfgConfiguration(
        "Configuration template"
        value: CfgConfigurationInput!
    ): CfgConfiguration
    "Create or update a scalar value"
    cfgScalar(value: CfgScalarInput!): CfgScalar
    "Creat or update version"
    cfgVersion(
        "Version"
        value: CfgVersionInput!
    ): CfgVersion
    destroyBranch(
        "Branch id"
        id: String
    ): Boolean
    "Destroy a complex by id"
    destroyCfgComplex(
        "Id of complex to be destroyed"
        id: String!
    ): Boolean
    "Destroy configuration"
    destroyCfgConfiguration(
        "Id of the configuration to be deleted"
        id: String!
    ): Boolean
    "Delete a scalar value"
    destroyCfgScalar(
        "Id of scalar to be deleted"
        id: String!
    ): Boolean
    "Remove version"
    destroyCfgVersion(
        "ID of the version tto be removed"
        id: String!
    ): Boolean
}

type queries {
    "Get configurations"
    cfgAllConfigurations(
        "Options to filter through"
        filter: CfgConfigurationInputFilter
    ): [CfgConfiguration]
    "Get branch by id"
    cfgBranch(id: String!): CfgBranch
    "Get complex value by its id"
    cfgComplex(id: String!): CfgComplex
    "Get configuration by id"
    cfgConfiguration(
        "Id of the configuration"
        id: String!
    ): CfgConfiguration
    "Get scalar value by its id"
    cfgScalar(id: String!): CfgScalar
    "Get version by id"
    cfgVersion(
        "Id of the version"
        id: String!
    ): CfgVersion
}

enum CfgEnumComplexType {
    "JS-like array"
    array
    "JS-like object"
    object
}

enum CfgEnumScalarType {
    "Boolean value"
    boolean
    "Number value"
    number
    "String value"
    string
}

input CfgBranchInput {
    "An array of complex values. They will be created automaticly if not exist"
    complexValues: [CfgComplexInput]
    "Id. If there is such branch, itl be update if not, new branch with this id will be created"
    id: String
    "Name. If updating existing branch, it is not required"
    name: String
    "An array of scalar values. They will be created automaticly if not exist"
    scalarValues: [CfgScalarInput]
    "What to attach to"
    sourceId: String
}

input CfgComplexInput {
    "Id. If there is such complex value, itl be update if not, new value with this id will be created"
    id: String
    "Name. If updating existing value, it is not required"
    name: String
    "What this complex value is attached to"
    sourceId: String
    "Type. If updating existing value, it is not required"
    type: CfgEnumComplexType
    "An array of scalar values. If the value exists, than it will be added directy or it will be created automaticly"
    values: [CfgScalarInput]
}

input CfgConfigurationInput {
    "Id of the configuration"
    id: String
    "Name  of the configuration"
    name: String
    "Versions attached to the configuration"
    versions: [CfgVersionInput]
}

input CfgConfigurationInputFilter {
    "Name of the configuration"
    name: String
}

input CfgScalarInput {
    "Id. If there is such scalar value, itl be update if not, new value with this id will be created"
    id: String
    "Name. If updating existing value, it is not required"
    name: String
    "What this scalar is attached to"
    sourceId: String
    "Type. If updating existing value, it is not required"
    type: CfgEnumScalarType
    "JSON stringyfied real value. If updating existing value, it is not required"
    value: String
}

input CfgVersionInput {
    "Branches to attach"
    branches: [CfgBranchInput]
    "Id. If there is such version, itl be update if not, new value with this id will be created"
    id: String
    "Name. If updating existing value, it is not required"
    name: String
    "What this version is attached to"
    sourceId: String
}


"The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch."
scalar Timestamp
